{"version":3,"sources":["src/js/NotesView.js","src/js/NotesAPI.js","src/js/App.js","src/js/main.js"],"names":["NotesView","root","onNoteSelect","onNoteAdd","onNoteEdit","onNoteDelete","innerHTML","btnAddNote","querySelector","inpTitle","inpBody","addEventListener","forEach","inputField","updatedTitle","value","trim","updatedBody","updateNotePreviewVisiblity","id","title","body","updated","substring","length","toLocaleString","undefined","dateStyle","timeStyle","notes","notesListContainer","note","html","_createListItemHTML","Date","insertAdjacentHTML","querySelectorAll","noteListItem","dataset","noteId","confirm","classList","remove","add","visible","style","visibility","NotesAPI","JSON","parse","localStorage","getItem","sort","a","b","noteToSave","getAllNotes","existing","find","toISOString","Math","floor","random","push","setItem","stringify","newNote","filter","App","activeNote","view","_handlers","_refreshNotes","_setNotes","_setActiveNote","updateNoteList","updateActiveNote","selectedNote","saveNote","deleteNote","document","getElementById","app"],"mappings":"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","file":"main.69df28f9.js","sourceRoot":"..","sourcesContent":["export default class NotesView {\r\n  constructor(\r\n    root,\r\n    { onNoteSelect, onNoteAdd, onNoteEdit, onNoteDelete } = {}\r\n  ) {\r\n    this.root = root;\r\n    this.onNoteSelect = onNoteSelect;\r\n    this.onNoteAdd = onNoteAdd;\r\n    this.onNoteDelete = onNoteDelete;\r\n    this.onNoteEdit = onNoteEdit;\r\n    this.root.innerHTML = `<div class=\"notes__sidebar\">\r\n                <button class=\"notes__add\" type=\"button\">Add Note</button>\r\n                <div class=\"notes__list\"></div>\r\n            </div>\r\n            <div class=\"notes__preview\">\r\n                <input class=\"notes__title\" type=\"text\" placeholder=\"Title...\">\r\n                <textarea class=\"notes__body\" placeholder=\"Take Note\"></textarea>\r\n            </div>`;\r\n    const btnAddNote = this.root.querySelector(\".notes__add\");\r\n    const inpTitle = this.root.querySelector(\".notes__title\");\r\n    const inpBody = this.root.querySelector(\".notes__body\");\r\n    btnAddNote.addEventListener(\"click\", () => {\r\n      this.onNoteAdd();\r\n    });\r\n\r\n    [inpTitle, inpBody].forEach((inputField) => {\r\n      inputField.addEventListener(\"blur\", () => {\r\n        const updatedTitle = inpTitle.value.trim();\r\n        const updatedBody = inpBody.value.trim();\r\n        this.onNoteEdit(updatedTitle, updatedBody);\r\n      });\r\n    });\r\n\r\n    // TODO:hide the note view from todo\r\n    this.updateNotePreviewVisiblity(false);\r\n  }\r\n  _createListItemHTML(id, title, body, updated) {\r\n    const MAX_BODY_LENGTH = 60;\r\n    return `<div class=\"notes__list-item\" data-note-id=\"${id}\">\r\n      <div class=\"notes__small-title\">${title}</div> \r\n      <div class=\"notes__small-body\">${body.substring(0, MAX_BODY_LENGTH)}${\r\n      body.length > MAX_BODY_LENGTH ? \"...\" : \"\"\r\n    }</div> \r\n      <div class=\"notes__small-updated\">${updated.toLocaleString(undefined, {\r\n        dateStyle: \"full\",\r\n        timeStyle: \"short\",\r\n      })}</div> \r\n      </div>`;\r\n  }\r\n\r\n  //   local storage notes\r\n  updateNoteList(notes) {\r\n    const notesListContainer = this.root.querySelector(\".notes__list\");\r\n    // Empty list\r\n    notesListContainer.innerHTML = \"\";\r\n    for (const note of notes) {\r\n      const html = this._createListItemHTML(\r\n        note.id,\r\n        note.title,\r\n        note.body,\r\n        new Date(note.updated)\r\n      );\r\n      notesListContainer.insertAdjacentHTML(\"beforeend\", html);\r\n    }\r\n    //Add select/delete events for each list item\r\n    notesListContainer\r\n      .querySelectorAll(\".notes__list-item\")\r\n      .forEach((noteListItem) => {\r\n        //   selecting by one click\r\n        noteListItem.addEventListener(\"click\", () => {\r\n          this.onNoteSelect(noteListItem.dataset.noteId);\r\n        });\r\n        // deleting by double click\r\n        noteListItem.addEventListener(\"dblclick\", () => {\r\n          const doDelete = confirm(\r\n            \"are you sure You want to delete this note?\"\r\n          );\r\n          if (doDelete) {\r\n            this.onNoteDelete(noteListItem.dataset.noteId);\r\n          }\r\n        });\r\n      });\r\n  }\r\n  updateActiveNote(note) {\r\n    this.root.querySelector(\".notes__title\").value = note.title;\r\n    this.root.querySelector(\".notes__body\").value = note.body;\r\n    this.root.querySelectorAll(\".notes__list-item\").forEach((noteListItem) => {\r\n      noteListItem.classList.remove(\"notes__list-item--selected\");\r\n    });\r\n    this.root\r\n      .querySelector(`.notes__list-item[data-note-id=\"${note.id}\"]`)\r\n      .classList.add(\"notes__list-item--selected\");\r\n  }\r\n  updateNotePreviewVisiblity(visible) {\r\n    this.root.querySelector(\".notes__preview\").style.visibility = visible\r\n      ? \"visible\"\r\n      : \"hidden\";\r\n  }\r\n}\r\n","export default class NotesAPI {\r\n  static getAllNotes() {\r\n    const notes = JSON.parse(localStorage.getItem(\"notesapp-notes\") || \"[]\");\r\n    // returning notes and sorting according to dates\r\n    return notes.sort((a, b) => {\r\n      return new Date(a.updated) > new Date(b.updated) ? -1 : 1;\r\n    });\r\n  }\r\n  static saveNote(noteToSave) {\r\n    const notes = NotesAPI.getAllNotes();\r\n\r\n    // when id is same means existing one\r\n    const existing = notes.find((note) => note.id == noteToSave.id);\r\n    // editing and update\r\n    if (existing) {\r\n      existing.title = noteToSave.title;\r\n      existing.body = noteToSave.body;\r\n      existing.updated = new Date().toISOString();\r\n    }\r\n    // creating new note\r\n    else {\r\n      noteToSave.id = Math.floor(Math.random() * 1000000);\r\n      noteToSave.updated = new Date().toISOString();\r\n      notes.push(noteToSave);\r\n    }\r\n    localStorage.setItem(\"notesapp-notes\", JSON.stringify(notes));\r\n  }\r\n  //   delete note functionality\r\n  static deleteNote(id) {\r\n    const notes = NotesAPI.getAllNotes();\r\n    const newNote = notes.filter((note) => note.id != id);\r\n    localStorage.setItem(\"notesapp-notes\", JSON.stringify(newNote));\r\n  }\r\n}\r\n","import NotesView from \"./NotesView.js\";\r\nimport NotesAPI from \"./NotesAPI.js\";\r\n// tieing everything together\r\nexport default class App {\r\n  constructor(root) {\r\n    this.notes = [];\r\n    this.activeNote = null;\r\n    this.view = new NotesView(root, this._handlers());\r\n    this._refreshNotes();\r\n  }\r\n  _refreshNotes() {\r\n    const notes = NotesAPI.getAllNotes();\r\n    this._setNotes(notes);\r\n    if (notes.length > 0) {\r\n      this._setActiveNote(notes[0]);\r\n    }\r\n  }\r\n  _setNotes(notes) {\r\n    this.notes = notes;\r\n    this.view.updateNoteList(notes);\r\n    this.view.updateNotePreviewVisiblity(notes.length > 0);\r\n  }\r\n  _setActiveNote(note) {\r\n    this.activeNote = note;\r\n    this.view.updateActiveNote(note);\r\n  }\r\n  _handlers() {\r\n    return {\r\n      onNoteSelect: (noteId) => {\r\n        const selectedNote = this.notes.find((note) => note.id == noteId);\r\n        this._setActiveNote(selectedNote);\r\n      },\r\n      onNoteAdd: () => {\r\n        const newNote = {\r\n          title: \"\",\r\n          body: \"\",\r\n        };\r\n        NotesAPI.saveNote(newNote);\r\n        this._refreshNotes();\r\n      },\r\n      onNoteEdit: (title, body) => {\r\n        NotesAPI.saveNote({\r\n          id: this.activeNote.id,\r\n          title,\r\n          body,\r\n        });\r\n        this._refreshNotes();\r\n      },\r\n      onNoteDelete: (noteId) => {\r\n        NotesAPI.deleteNote(noteId);\r\n        this._refreshNotes();\r\n      },\r\n    };\r\n  }\r\n}\r\n","import App from \"./App.js\";\r\nconst root = document.getElementById(\"app\");\r\nconst app = new App(root);\r\n"]}